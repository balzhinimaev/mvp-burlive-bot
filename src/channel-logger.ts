import { config } from './config';
import { UserStartLog, PaymentLog, UTMParams } from './types';
import { logger } from './utils';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
type TelegramBot = any;

export class ChannelLogger {
  private bot: TelegramBot;
  private channelId?: string;
  private isEnabled: boolean;
  private userStartCache = new Set<number>(); // –ö–µ—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

  constructor(bot: TelegramBot) {
    this.bot = bot;
    this.channelId = config.LOG_CHANNEL_ID;
    this.isEnabled = config.LOG_CHANNEL_ENABLED && !!this.channelId;
    
    logger.info('Channel logger initialized', {
      enabled: this.isEnabled,
      channelId: this.channelId ? `***${this.channelId.slice(-4)}` : 'none',
    });
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async logUserStart(userStartData: UserStartLog): Promise<void> {
    if (!this.isEnabled || !this.channelId) {
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–µ—à—É)
      const isFirstTime = !this.userStartCache.has(userStartData.userId);
      if (!isFirstTime) {
        userStartData.isFirstTime = false;
      } else {
        this.userStartCache.add(userStartData.userId);
        userStartData.isFirstTime = true;
      }

      const message = this.formatUserStartMessage(userStartData);
      
      await this.bot.telegram.sendMessage(this.channelId, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      });

      logger.info('User start logged to channel', {
        userId: userStartData.userId,
        channelId: this.channelId,
        isFirstTime: userStartData.isFirstTime,
      });

    } catch (error: any) {
      logger.error('Failed to log user start to channel', {
        userId: userStartData.userId,
        channelId: this.channelId,
        error: error.message,
      });
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private formatUserStartMessage(data: UserStartLog): string {
    const { userId, username, firstName, lastName, utm, promoId, timestamp, isFirstTime } = data;
    
    // –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    const statusEmoji = isFirstTime ? 'üÜï' : 'üîÑ';
    const statusText = isFirstTime ? '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userInfo = [];
    if (firstName) userInfo.push(firstName);
    if (lastName) userInfo.push(lastName);
    const displayName = userInfo.length > 0 ? userInfo.join(' ') : '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const usernameText = username ? `@${username}` : '–±–µ–∑ username';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const utmParts = [];
    if (utm.utm_source) utmParts.push(`source: ${utm.utm_source}`);
    if (utm.utm_campaign) utmParts.push(`campaign: ${utm.utm_campaign}`);
    if (utm.utm_medium) utmParts.push(`medium: ${utm.utm_medium}`);
    if (utm.utm_term) utmParts.push(`term: ${utm.utm_term}`);
    if (utm.utm_content) utmParts.push(`content: ${utm.utm_content}`);
    
    const utmText = utmParts.length > 0 ? utmParts.join(', ') : '–±–µ–∑ UTM';
    const promoText = promoId ? `\nüé´ <b>–ü—Ä–æ–º–æ:</b> ${promoId}` : '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const timeText = timestamp.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });

    return `${statusEmoji} <b>${statusText}</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${displayName} (${usernameText})
üÜî <b>ID:</b> <code>${userId}</code>
üìä <b>UTM:</b> ${utmText}${promoText}
üïí <b>–í—Ä–µ–º—è:</b> ${timeText} (–ú–°–ö)`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
   */
  async testChannel(): Promise<boolean> {
    if (!this.channelId) {
      return false;
    }

    try {
      await this.bot.telegram.sendMessage(this.channelId, 'üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É –ª–æ–≥–æ–≤', {
        disable_notification: true,
      });
      return true;
    } catch (error: any) {
      logger.error('Channel test failed', {
        channelId: this.channelId,
        error: error.message,
      });
      return false;
    }
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  setEnabled(enabled: boolean): void {
    this.isEnabled = enabled && !!this.channelId;
    logger.info('Channel logging status changed', { enabled: this.isEnabled });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  isLoggerEnabled(): boolean {
    return this.isEnabled;
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async logPayment(paymentData: PaymentLog): Promise<void> {
    if (!this.isEnabled || !this.channelId) {
      return;
    }

    try {
      const message = this.formatPaymentMessage(paymentData);
      
      await this.bot.telegram.sendMessage(this.channelId, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      });

      logger.info('Payment logged to channel', {
        userId: paymentData.userId,
        paymentId: paymentData.paymentId,
        amount: paymentData.amount,
        channelId: this.channelId,
      });

    } catch (error: any) {
      logger.error('Failed to log payment to channel', {
        userId: paymentData.userId,
        paymentId: paymentData.paymentId,
        channelId: this.channelId,
        error: error.message,
      });
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
   */
  private formatPaymentMessage(data: PaymentLog): string {
    const { 
      userId, 
      username, 
      firstName, 
      lastName, 
      paymentId, 
      amount, 
      currency, 
      registrationTime, 
      paymentTime, 
      timeToPayment,
      utm,
      promoId 
    } = data;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userInfo = [];
    if (firstName) userInfo.push(firstName);
    if (lastName) userInfo.push(lastName);
    const displayName = userInfo.length > 0 ? userInfo.join(' ') : '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const usernameText = username ? `@${username}` : '–±–µ–∑ username';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–ª–∞—Ç–µ–∂–∞
    const timeToPaymentText = this.formatTimeToPayment(timeToPayment);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const utmParts = [];
    if (utm?.utm_source) utmParts.push(`source: ${utm.utm_source}`);
    if (utm?.utm_campaign) utmParts.push(`campaign: ${utm.utm_campaign}`);
    if (utm?.utm_medium) utmParts.push(`medium: ${utm.utm_medium}`);
    if (utm?.utm_term) utmParts.push(`term: ${utm.utm_term}`);
    if (utm?.utm_content) utmParts.push(`content: ${utm.utm_content}`);
    
    const utmText = utmParts.length > 0 ? utmParts.join(', ') : '–±–µ–∑ UTM';
    const promoText = promoId ? `\nüé´ <b>–ü—Ä–æ–º–æ:</b> ${promoId}` : '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const registrationTimeText = registrationTime.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });

    const paymentTimeText = paymentTime.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });

    return `üí∞ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${displayName} (${usernameText})
üÜî <b>ID:</b> <code>${userId}</code>
üí≥ <b>–ü–ª–∞—Ç–µ–∂:</b> ${amount} ${currency.toUpperCase()}
üÜî <b>Payment ID:</b> <code>${paymentId}</code>
‚è±Ô∏è <b>–í—Ä–µ–º—è –¥–æ –ø–ª–∞—Ç–µ–∂–∞:</b> ${timeToPaymentText}
üìä <b>UTM:</b> ${utmText}${promoText}

üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> ${registrationTimeText} (–ú–°–ö)
üí≥ <b>–ü–ª–∞—Ç–µ–∂:</b> ${paymentTimeText} (–ú–°–ö)`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–ª–∞—Ç–µ–∂–∞
   */
  private formatTimeToPayment(milliseconds: number): string {
    const seconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) {
      return `${days}–¥ ${hours % 24}—á ${minutes % 60}–º`;
    } else if (hours > 0) {
      return `${hours}—á ${minutes % 60}–º`;
    } else if (minutes > 0) {
      return `${minutes}–º ${seconds % 60}—Å`;
    } else {
      return `${seconds}—Å`;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  clearUserCache(): void {
    this.userStartCache.clear();
    logger.info('User start cache cleared');
  }
}