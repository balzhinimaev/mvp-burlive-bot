import { Telegraf } from 'telegraf';
import express from 'express';
import { config } from './config';
import { ApiService } from './api';
import { parsePayload, createStartAppParam, createMiniAppLink, hasValidUtm, logger } from './utils';
import { LeadData, UserStartLog, PaymentLog, PaymentLogRequest, PaymentCreationLog, PaymentCreationLogRequest } from './types';
import { ChannelLogger } from './channel-logger';
import { authenticateApiKey, requirePaymentLogging } from './auth-middleware';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ
type BotContext = any;

const bot = new Telegraf<BotContext>(config.BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
const channelLogger = new ChannelLogger(bot);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express —Å–µ—Ä–≤–µ—Ä–∞
const app = express();
app.use(express.json({ limit: '2mb' })); // –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
app.post('/api/payment-log', authenticateApiKey, requirePaymentLogging, async (req, res) => {
  try {
    const paymentData: PaymentLogRequest = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!paymentData.userId || !paymentData.paymentId || !paymentData.amount || !paymentData.currency || !paymentData.registrationTime || !paymentData.paymentTime) {
      return res.status(400).json({
        success: false,
        error: 'Missing required fields: userId, paymentId, amount, currency, registrationTime, paymentTime'
      });
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
    const registrationTime = new Date(paymentData.registrationTime);
    const paymentTime = new Date(paymentData.paymentTime);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
    if (isNaN(registrationTime.getTime()) || isNaN(paymentTime.getTime())) {
      return res.status(400).json({
        success: false,
        error: 'Invalid date format. Use ISO 8601 format'
      });
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–ª–∞—Ç–µ–∂–∞
    const timeToPayment = paymentTime.getTime() - registrationTime.getTime();
    
    if (timeToPayment < 0) {
      return res.status(400).json({
        success: false,
        error: 'Payment time cannot be before registration time'
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const paymentLog: PaymentLog = {
      userId: paymentData.userId,
      username: paymentData.username,
      firstName: paymentData.firstName,
      lastName: paymentData.lastName,
      paymentId: paymentData.paymentId,
      amount: paymentData.amount,
      currency: paymentData.currency,
      registrationTime,
      paymentTime,
      timeToPayment,
      utm: paymentData.utm,
      promoId: paymentData.promoId,
    };

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª
    channelLogger.logPayment(paymentLog).catch((error: any) => {
      logger.error('Failed to log payment to channel', { 
        userId: paymentData.userId, 
        paymentId: paymentData.paymentId,
        error: error.message 
      });
    });

    logger.info('Payment log request processed', {
      userId: paymentData.userId,
      paymentId: paymentData.paymentId,
      amount: paymentData.amount,
      timeToPayment: timeToPayment,
    });

    return res.json({
      success: true,
      message: 'Payment logged successfully',
      data: {
        userId: paymentData.userId,
        paymentId: paymentData.paymentId,
        timeToPayment: timeToPayment,
      }
    });

  } catch (error: any) {
    logger.error('Error processing payment log request', {
      error: error.message,
      stack: error.stack,
    });

    return res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({
    success: true,
    message: 'Bot is running',
    timestamp: new Date().toISOString(),
    paymentLoggingEnabled: config.PAYMENT_LOG_ENABLED,
  });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —Ç–∞—Ä–∏—Ñ)
app.post('/api/payment-creation-log', authenticateApiKey, requirePaymentLogging, async (req, res) => {
  try {
    const paymentCreationData: PaymentCreationLogRequest = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!paymentCreationData.userId || !paymentCreationData.paymentId || !paymentCreationData.amount || !paymentCreationData.currency) {
      return res.status(400).json({
        success: false,
        error: 'Missing required fields: userId, paymentId, amount, currency'
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const paymentCreationLog: PaymentCreationLog = {
      userId: paymentCreationData.userId,
      username: paymentCreationData.username,
      firstName: paymentCreationData.firstName,
      lastName: paymentCreationData.lastName,
      paymentId: paymentCreationData.paymentId,
      amount: paymentCreationData.amount,
      currency: paymentCreationData.currency,
      tariffName: paymentCreationData.tariffName,
      timestamp: new Date(),
      utm: paymentCreationData.utm,
      promoId: paymentCreationData.promoId,
    };
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª
    channelLogger.logPaymentCreation(paymentCreationLog).catch((error: any) => {
      logger.error('Failed to log payment creation to channel', { 
        userId: paymentCreationData.userId, 
        paymentId: paymentCreationData.paymentId,
        error: error.message 
      });
    });

    logger.info('Payment creation log request processed', {
      userId: paymentCreationData.userId,
      paymentId: paymentCreationData.paymentId,
      amount: paymentCreationData.amount,
      tariffName: paymentCreationData.tariffName,
    });

    return res.json({
      success: true,
      message: 'Payment creation logged successfully',
      data: {
        userId: paymentCreationData.userId,
        paymentId: paymentCreationData.paymentId,
        amount: paymentCreationData.amount,
        tariffName: paymentCreationData.tariffName,
      }
    });

  } catch (error: any) {
    logger.error('Error processing payment creation log request', {
      error: error.message,
      stack: error.stack,
    });

    return res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use((ctx: BotContext, next: () => Promise<void>) => {
  const user = ctx.from;
  const messageText = ctx.message && 'text' in ctx.message ? ctx.message.text : 'non-text';
  
  logger.info('Received message', {
    userId: user?.id,
    username: user?.username,
    firstName: user?.first_name,
    messageText,
  });
  
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx: BotContext) => {
  const startTime = Date.now();
  const userId = ctx.from.id;
  const payload = ctx.startPayload || '';
  
  logger.info('Processing /start command', {
    userId,
    payload,
  });

  try {
    // –ü–∞—Ä—Å–∏–º payload
    const parsedData = parsePayload(payload);
    const { utm, promoId } = parsedData;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UX)
    const leadData: LeadData = {
      userId,
      utm,
      promoId,
    };
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥, –Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    ApiService.sendLead(leadData).catch((error) => {
      logger.error('Failed to send lead', { userId, error: error.message });
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
    const userStartLog: UserStartLog = {
      userId,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name,
      languageCode: ctx.from.language_code,
      utm,
      promoId,
      timestamp: new Date(),
    };
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª, –Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    channelLogger.logUserStart(userStartLog).catch((error: any) => {
      logger.error('Failed to log user start to channel', { userId, error: error.message });
    });

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Mini App
    let keyboard;
    
    if (config.MINI_APP_STARTAPP_ENABLED && hasValidUtm(utm)) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º startapp deep link (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
      const startAppParam = createStartAppParam(utm, promoId);
      const miniAppUrl = createMiniAppLink(config.BOT_USERNAME, startAppParam);
      
      keyboard = {
        inline_keyboard: [[
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            url: miniAppUrl,
          }
        ]]
      };
      
      logger.info('Created startapp link', {
        userId,
        startAppParam,
        url: miniAppUrl,
      });
      
    } else {
      // Fallback: –æ–±—ã—á–Ω–∞—è WebApp –∫–Ω–æ–ø–∫–∞
      keyboard = {
        inline_keyboard: [[
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: {
              url: config.MINI_APP_URL,
            }
          }
        ]]
      };
      
      logger.info('Created webapp button', {
        userId,
        url: config.MINI_APP_URL,
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage = 
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è <b>–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b>!\n\n` +
      `–ò–∑—É—á–∞–π—Ç–µ –ê–Ω–ª–∏–π—Å–∫–∏–π —Å –ø–æ–º–æ—â—å—é –º–∏–Ω–∏-—É—Ä–æ–∫–æ–≤, –æ–∑–≤—É—á–∫–∏ –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏. ` +
      `20 —Ñ—Ä–∞–∑ –∑–∞ 7 –¥–Ω–µ–π ‚Äî –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!`;

    // Log the exact keyboard payload before sending to help diagnose BUTTON_URL_INVALID
    logger.info('Sending welcome message with keyboard', {
      userId,
      keyboardPreview: JSON.stringify(keyboard).substring(0, 1000),
    });

    await ctx.reply(welcomeMessage, {
      reply_markup: keyboard,
    });
    
    const processingTime = Date.now() - startTime;
    logger.info('Successfully processed /start', {
      userId,
      processingTime,
      hasUtm: hasValidUtm(utm),
    });

  } catch (error: any) {
    logger.error('Error processing /start', {
      userId,
      error: error.message,
      stack: error.stack,
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    // Log the fallback keyboard before sending
    const fallbackKeyboard = {
      inline_keyboard: [[
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: config.MINI_APP_URL }
        }
      ]]
    };

    logger.info('Sending fallback welcome message with keyboard', {
      userId,
      keyboardPreview: JSON.stringify(fallbackKeyboard).substring(0, 1000),
    });

    await ctx.reply(
      'üá≤üá≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:',
      {
        reply_markup: fallbackKeyboard,
      }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.help(async (ctx: BotContext) => {
  const userId = ctx.from.id;
  
  logger.info('Processing /help command', { userId });
  
  const helpMessage = 
    `‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n` +
    `–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∞—Ç—å –±—É—Ä—è—Ç—Å–∫–∏–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ Mini App.\n\n` +
    `<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
    `‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ\n` +
    `‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n` +
    `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;

  await ctx.reply(helpMessage, {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [[
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: config.MINI_APP_URL }
        }
      ]]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.on('message', async (ctx: BotContext) => {
  
  const userId = ctx.from.id;
  const messageText = 'text' in ctx.message ? ctx.message.text : 'non-text';
  
  logger.info('Unknown message received', { userId, messageText });
  
  await ctx.reply(
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.',
    {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: config.MINI_APP_URL }
          }
        ]]
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err: any, ctx: BotContext) => {
  logger.error('Bot error', {
    userId: ctx.from?.id,
    error: err.message,
    stack: err.stack,
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function startBot() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    const apiHealthy = await ApiService.healthCheck();
    if (!apiHealthy) {
      logger.warn('API health check failed, continuing anyway');
    } else {
      logger.info('API health check passed');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É –ª–æ–≥–æ–≤
    if (channelLogger.isLoggerEnabled()) {
      const channelHealthy = await channelLogger.testChannel();
      if (!channelHealthy) {
        logger.warn('Channel test failed, channel logging may not work');
      } else {
        logger.info('Channel test passed, logging enabled');
      }
    } else {
      logger.info('Channel logging disabled');
    }

    if (process.env.NODE_ENV === 'production') {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
      const webhookUrl = process.env.WEBHOOK_URL;
      if (!webhookUrl) {
        throw new Error('WEBHOOK_URL is required in production');
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL –∏ path
      const path = config.WEBHOOK_PATH.startsWith('/')
        ? config.WEBHOOK_PATH
        : `/${config.WEBHOOK_PATH}`;
      const fullWebhookUrl = `${webhookUrl.replace(/\/+$/, '')}${path}`;

      // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–µ–∫—Ä–µ—Ç –¥–ª—è Bot API
      const secretToken = process.env.TELEGRAM_SECRET_TOKEN;

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware Telegraf –¥–ª—è –≤–µ–±—Ö—É–∫–∞
      app.use((bot as any).webhookCallback(path));

      // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–≤–æ—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      if (secretToken) {
        app.use(path, (req, res, next) => {
          if (req.get('x-telegram-bot-api-secret-token') !== secretToken) {
            return res.sendStatus(401);
          }
          return next();
        });
      }

      // –°—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Ä–≤–µ—Ä, –∞ —É–∂–µ –ø–æ—Ç–æ–º –≤—ã—Å—Ç–∞–≤–ª—è–µ–º webhook
      app.listen(config.PORT, async () => {
        logger.info('Express server started', { port: config.PORT });
        try {
          await bot.telegram.setWebhook(fullWebhookUrl);
          logger.info('Webhook set', { url: fullWebhookUrl });
        } catch (err: any) {
          logger.error('Failed to set webhook', { error: err.message });
          process.exit(1);
        }
      });

      logger.info('Bot started with webhook', { port: config.PORT });

    } else {
      // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º long polling
      await bot.telegram.deleteWebhook().catch(() => {});
      logger.info('Webhook removed for development');

      app.listen(config.PORT, () => {
        logger.info('Express server started', { port: config.PORT });
      });

      await bot.launch();
      logger.info('Bot started with long polling');
    }

    logger.info('Bot successfully started', {
      username: config.BOT_USERNAME,
      apiUrl: config.API_BASE_URL,
      miniAppUrl: config.MINI_APP_URL,
    });

    // Graceful shutdown
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
    
  } catch (error: any) {
    logger.error('Failed to start bot', {
      error: error.message,
      stack: error.stack,
    });
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();
